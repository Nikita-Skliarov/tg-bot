
import logging
import json

#import json
from include.json_parse import coins_data

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackContext

############################ KEYBOARDS MARKUPS ############

# back button
back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")

# /start (default keyboard)
start_keyboard = [
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂–∏", callback_data='sale_status')],
    [InlineKeyboardButton("üíé –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤", callback_data='token_sale')],
    #[InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_sale')]
]
start_keyboard_m = InlineKeyboardMarkup(start_keyboard)

# Token sale 
token_sale_keyboard = [
    [InlineKeyboardButton(name, callback_data=name)]
    for name in coins_data.keys()
]
token_sale_keyboard_m = InlineKeyboardMarkup(token_sale_keyboard)

# Selected token sale
selected_token_keyboard = [
    [InlineKeyboardButton("üíé –ü—Ä–æ–¥–∞—Ç—å", callback_data="sale")],
    [InlineKeyboardButton("ü™ô –ù–∞–∑–∞–¥ –∫ —Ç–æ–∫–µ–Ω–∞–º", callback_data="token_sale")],
    [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')],
]
selected_token_keyboard_m = InlineKeyboardMarkup(selected_token_keyboard)

############################ KEYBOARDS MARKUPS ############


# /start message
async def Start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.")
    # Check if the update is from a callback query
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.reply_text(message_text, reply_markup=start_keyboard_m)
    else:
        # If not a callback query, handle as before
        await update.message.reply_text(message_text, reply_markup=start_keyboard_m)

# Command handler for /continue
async def Token_sale(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    reply = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å."

    # Read the JSON file and generate keyboard buttons
    try:
        await update.callback_query.message.reply_text(text=reply, reply_markup=token_sale_keyboard_m)
    
    except Exception as e:
        await update.callback_query.message.reply_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ JSON: {str(e)}")
        
async def Click_on_name_token(update: Update, context: ContextTypes.DEFAULT_TYPE, coin_name: str):
    query = update.callback_query
    await query.answer()
    coin_info = coins_data[coin_name]
    message = (
        f"<b><u>{coin_name}</u></b> üöÄ\n\n"
        f"<i>–¶–µ–Ω–∞ –∑–∞ ({coin_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}):</i>\n"
        f"<b>{coin_info['–¶–µ–Ω–∞']} $</b>\n\n"
        f"<i>–í –Ω–∞–ª–∏—á–∏–∏!</i> üéâ\n\n"
        f"<b>üî• –ü—Ä–æ–¥–∞–π—Ç–µ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! üî•</b>\n"
        f"üîπ <i>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>\n"
        f"üîπ <i>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</i>\n"
        f"üîπ <i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
        f"<b>–ù–µ —É—Å–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å!</b> üöÄ"
    )
    await update.callback_query.message.reply_text(message, parse_mode='HTML', reply_markup=selected_token_keyboard_m)