import logging
import random
import json
from include.json_parse import coins_data
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler

TOKEN_SALE_PROCEDURE, TOKEN_COUNT, CHECK_SUBSCRIPTION = range(3)

# Load sponsors data
with open('include/sponsors.json', 'r', encoding='utf-8') as file:
    sponsors_data = json.load(file)

############################ KEYBOARDS MARKUPS ############

start_keyboard = [
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂–∏", callback_data='sale_status')],
    [InlineKeyboardButton("üíé –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤", callback_data='token_sale')]
]
start_keyboard_m = InlineKeyboardMarkup(start_keyboard)

token_sale_keyboard = [
    [InlineKeyboardButton(name, callback_data=name)]
    for name in coins_data.keys()
]
token_sale_keyboard_m = InlineKeyboardMarkup(token_sale_keyboard)

selected_token_keyboard = [
    [InlineKeyboardButton("üíé –ü—Ä–æ–¥–∞—Ç—å", callback_data="sale")],
    [InlineKeyboardButton("ü™ô –ù–∞–∑–∞–¥ –∫ —Ç–æ–∫–µ–Ω–∞–º", callback_data="token_sale")],
    [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')],
]
selected_token_keyboard_m = InlineKeyboardMarkup(selected_token_keyboard)

submit_token_buy_keyboard = [
    [InlineKeyboardButton("üÜó", callback_data="set_queue")],
    [InlineKeyboardButton("üö´", callback_data="home")]
]

submit_token_buy_keyboard_m = InlineKeyboardMarkup(submit_token_buy_keyboard)

order_result_keyboard = [
    [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')]
]

order_result_keyboard_m = InlineKeyboardMarkup(order_result_keyboard)

############################ KEYBOARDS MARKUPS ############

async def Start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.reply_text(message_text, reply_markup=start_keyboard_m)
    else:
        await update.message.reply_text(message_text, reply_markup=start_keyboard_m)

async def Token_sale(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    reply = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å."
    try:
        await update.callback_query.message.reply_text(text=reply, reply_markup=token_sale_keyboard_m)
    except Exception as e:
        await update.callback_query.message.reply_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ JSON: {str(e)}")

async def Click_on_name_token(update: Update, context: ContextTypes.DEFAULT_TYPE, coin_name: str):
    query = update.callback_query
    await query.answer()
    coin_info = coins_data[coin_name]
    context.user_data['selected_token'] = coin_name
    message = (
        f"<b><u>{coin_name}</u></b> üöÄ\n\n"
        f"<i>–¶–µ–Ω–∞ –∑–∞ ({coin_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}):</i>\n"
        f"<b>{coin_info['–¶–µ–Ω–∞']} $</b>\n\n"
        f"<i>–í –Ω–∞–ª–∏—á–∏–∏!</i> üéâ\n\n"
        f"<b>üî• –ü—Ä–æ–¥–∞–π—Ç–µ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! üî•</b>\n"
        f"üîπ <i>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</i>\n"
        f"üîπ <i>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</i>\n"
        f"üîπ <i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
        f"<b>–ù–µ —É—Å–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å!</b> üöÄ"
    )
    await update.callback_query.message.reply_text(message, parse_mode='HTML', reply_markup=selected_token_keyboard_m)

async def Token_sale_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    coin_name = context.user_data.get('selected_token')
    if coin_name:
        message = f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å (–º–∏–Ω. 100.000) –¥–ª—è {coin_name}"
        await update.callback_query.message.reply_text(message)
        return TOKEN_COUNT
    else:
        await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return ConversationHandler.END

async def Handle_token_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    attempts = context.user_data.get("attempts", 3)
    if attempts == 0:
        await update.message.reply_text("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        context.user_data["attempts"] = 3
        return ConversationHandler.END
    
    token_count = update.message.text
    try:
        token_count = int(token_count)
        if token_count >= 100000:
            coin_name = context.user_data.get('selected_token')
            message = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {token_count:,.2f} {coin_name}?"
            context.user_data["token_count"] = token_count
            await update.message.reply_text(message, reply_markup=submit_token_buy_keyboard_m)
        else:
            message = "–ß–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 100.000"
            context.user_data["attempts"] = attempts - 1
            await update.message.reply_text(message)
    except ValueError:
        message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        context.user_data["attempts"] = attempts - 1
        await update.message.reply_text(message)
        
    return TOKEN_COUNT

async def Check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    sponsor = sponsors_data['tg-channels']['Lord Crypto Exchange']
    invite_link = sponsor['invintation-link']
    
    message = (
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."
    )
    subscribe_keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", url=invite_link)],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
    ]
    subscribe_keyboard_m = InlineKeyboardMarkup(subscribe_keyboard)
    await query.message.reply_text(message, reply_markup=subscribe_keyboard_m)
    return CHECK_SUBSCRIPTION

async def Confirm_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # Replace this with actual API calls to check the subscription status
    sponsor = sponsors_data['tg-channels']['Lord Crypto Exchange']
    channel_id = sponsor['channel-id']
    
    chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=query.from_user.id)
    await query.message.reply_text(chat_member)
    
    def is_subscribed(chat_id, user_id):
        try:
            chat_member_status = chat_member.status in ['member', 'administrator', 'creator']
            return True
        except Exception as e:
            return False

    if is_subscribed(channel_id, query.from_user.id):
        await query.message.reply_text("–ü–æ–¥–ø–∏—Å–∞–Ω.")
        await Submit_token_buy(update, context)
    else:
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏.")
        return CHECK_SUBSCRIPTION

async def Submit_token_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    token_name = context.user_data.get("selected_token")
    token_count = context.user_data.get("token_count")
    token_price = coins_data[token_name]["–¶–µ–Ω–∞"]
    token_price_count = coins_data[token_name]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    total_amount = token_count / token_price_count * token_price
    
    message = (
        f"‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* ‚úÖ\n\n"
        f"–¢–æ–∫–µ–Ω: *{token_name}*\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{token_count:,.2f}*\n"
        f"–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: *{total_amount:,.2f} $*\n\n"
    )
    
    context.user_data["sale_status"] = message
    await update.callback_query.message.reply_text(message, parse_mode='Markdown', reply_markup=order_result_keyboard_m)

async def Sale_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = context.user_data.get("sale_status")
    await update.callback_query.message.reply_text(message, parse_mode='Markdown', reply_markup=order_result_keyboard_m)